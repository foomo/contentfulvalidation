// Code generated by gotsrpc https://github.com/foomo/gotsrpc/v2  - DO NOT EDIT.

package validation

import (
	go_context "context"
	go_net_http "net/http"

	github_com_foomo_contentfulvalidation_errors "github.com/foomo/contentfulvalidation/errors"
	github_com_foomo_contentfulvalidation_validator "github.com/foomo/contentfulvalidation/validator"
	gotsrpc "github.com/foomo/gotsrpc/v2"
	pkg_errors "github.com/pkg/errors"
)

type ValidationGoTSRPCClient interface {
	ListModelTypes(ctx go_context.Context) (availableModelTypes []*github_com_foomo_contentfulvalidation_validator.ModelTypeInfo, clientErr error)
	ValidateEntity(ctx go_context.Context, modelType github_com_foomo_contentfulvalidation_validator.ModelType, modelID github_com_foomo_contentfulvalidation_validator.ModelID, commit bool) (validationResult *github_com_foomo_contentfulvalidation_validator.ValidationResult, validationError *github_com_foomo_contentfulvalidation_errors.ValidationError, clientErr error)
	ValidationResult(ctx go_context.Context, modelType github_com_foomo_contentfulvalidation_validator.ModelType, modelID github_com_foomo_contentfulvalidation_validator.ModelID) (validationResult *github_com_foomo_contentfulvalidation_validator.ValidationResult, validationError *github_com_foomo_contentfulvalidation_errors.ValidationError, clientErr error)
	ValidationResults(ctx go_context.Context, modelType github_com_foomo_contentfulvalidation_validator.ModelType) (validationResults map[github_com_foomo_contentfulvalidation_validator.ModelID]*github_com_foomo_contentfulvalidation_validator.ValidationResult, validationError *github_com_foomo_contentfulvalidation_errors.ValidationError, clientErr error)
}

type HTTPValidationGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultValidationGoTSRPCClient(url string) *HTTPValidationGoTSRPCClient {
	return NewValidationGoTSRPCClient(url, "/services/contentfulvalidation/validation")
}

func NewValidationGoTSRPCClient(url string, endpoint string) *HTTPValidationGoTSRPCClient {
	return NewValidationGoTSRPCClientWithClient(url, endpoint, nil)
}

func NewValidationGoTSRPCClientWithClient(url string, endpoint string, client *go_net_http.Client) *HTTPValidationGoTSRPCClient {
	return &HTTPValidationGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}
func (tsc *HTTPValidationGoTSRPCClient) ListModelTypes(ctx go_context.Context) (availableModelTypes []*github_com_foomo_contentfulvalidation_validator.ModelTypeInfo, clientErr error) {
	args := []interface{}{}
	reply := []interface{}{&availableModelTypes}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "ListModelTypes", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call validation.ValidationGoTSRPCProxy ListModelTypes")
	}
	return
}

func (tsc *HTTPValidationGoTSRPCClient) ValidateEntity(ctx go_context.Context, modelType github_com_foomo_contentfulvalidation_validator.ModelType, modelID github_com_foomo_contentfulvalidation_validator.ModelID, commit bool) (validationResult *github_com_foomo_contentfulvalidation_validator.ValidationResult, validationError *github_com_foomo_contentfulvalidation_errors.ValidationError, clientErr error) {
	args := []interface{}{modelType, modelID, commit}
	reply := []interface{}{&validationResult, &validationError}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "ValidateEntity", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call validation.ValidationGoTSRPCProxy ValidateEntity")
	}
	return
}

func (tsc *HTTPValidationGoTSRPCClient) ValidationResult(ctx go_context.Context, modelType github_com_foomo_contentfulvalidation_validator.ModelType, modelID github_com_foomo_contentfulvalidation_validator.ModelID) (validationResult *github_com_foomo_contentfulvalidation_validator.ValidationResult, validationError *github_com_foomo_contentfulvalidation_errors.ValidationError, clientErr error) {
	args := []interface{}{modelType, modelID}
	reply := []interface{}{&validationResult, &validationError}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "ValidationResult", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call validation.ValidationGoTSRPCProxy ValidationResult")
	}
	return
}

func (tsc *HTTPValidationGoTSRPCClient) ValidationResults(ctx go_context.Context, modelType github_com_foomo_contentfulvalidation_validator.ModelType) (validationResults map[github_com_foomo_contentfulvalidation_validator.ModelID]*github_com_foomo_contentfulvalidation_validator.ValidationResult, validationError *github_com_foomo_contentfulvalidation_errors.ValidationError, clientErr error) {
	args := []interface{}{modelType}
	reply := []interface{}{&validationResults, &validationError}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "ValidationResults", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call validation.ValidationGoTSRPCProxy ValidationResults")
	}
	return
}
